pico-8 cartridge // http://www.pico-8.com
version 42
__lua__

state = {
	debug_text = "",
}

function _init()
	coin = new_coin(1)
end

function _update()
	coin.update()
end

function _draw()
	cls(1)
	map(0,0,0,0)
	coin.draw()
	print(state.debug_text, 0, 0, 7)
end


-->8
-- utils

function new_point(x, y)
	return {
		x = x or 0,
		y = y or 0,
		
		-- add another point to this one
		add = function(self, other)
			self.x += other.x
			self.y += other.y
			return self
		end,

		add_vector = function(self, vector)
			self.x += vector.x
			self.y += vector.y
			return self
		end,
		
		-- set new values
		set = function(self, x, y)
			self.x = x
			self.y = y
			return self
		end,
		
		-- create a copy
		copy = function(self)
			return new_point(self.x, self.y)
		end
	}
end

function new_vector(x, y)
  return {
    x = x or 0,
    y = y or 0,
    
    -- add another vector to this one
    add = function(self, other)
      self.x += other.x
      self.y += other.y
      return self
    end,
    
    -- multiply by a scalar
    mult = function(self, scalar)
      self.x *= scalar
      self.y *= scalar
      return self
    end,
    
    -- get the length/magnitude
    mag = function(self)
      return sqrt(self.x * self.x + self.y * self.y)
    end,
    
    -- normalize to unit vector
    normalize = function(self)
      local m = self:mag()
      if m > 0 then
        self.x /= m
        self.y /= m
      end
      return self
    end,
    
    -- create a copy
    copy = function(self)
      return new_vector(self.x, self.y)
    end,
    
    -- set new values
    set = function(self, x, y)
      self.x = x
      self.y = y
      return self
    end,

	 -- set with polar coordinates
	 set_polar = function(self, angle, length)
		 self.x = cos(angle) * length
		 self.y = sin(angle) * length
		 return self
	 end,

	 angle = function(self)
		 return atan2(self.y, self.x)
	 end,
  }
end
-->8
-- coin

coin_state = {
	initial_drop = 1,
	dropping = 2,
}

function new_coin(level)
	local coin = {}

	coin.pos = new_point(62, 32)
	coin.state = coin_state.initial_drop
	coin.speed = 0.7
	coin.level = level or 1
	coin.value = 0
	coin.target_x = 0
	coin.target_y = 0

	function pick_target()
		local dir = rnd()  -- 1 or 2
		if dir > 0.5 then
			coin.target_x = coin.pos.x - 4
		else
			coin.target_x = coin.pos.x + 4
		end
		coin.target_y = coin.pos.y + 8
		state.debug_text = "dir: " .. dir
	end


	function update_initial_drop()
		coin.pos.y += coin.speed
		coin.pos.y = min(coin.pos.y, 43)  -- prevent going above 32
		if coin.pos.y == 43 then
			coin.state = coin_state.dropping
			pick_target()
		end
	end

	function update_dropping()
		if coin.pos.x < coin.target_x then
			coin.pos.x += coin.speed * 2
			coin.pos.x = min(coin.pos.x, coin.target_x)
		else
			coin.pos.x -= coin.speed * 2
			coin.pos.x = max(coin.pos.x, coin.target_x)
		end
		coin.pos.y += coin.speed
		coin.pos.y = min(coin.pos.y, coin.target_y)

		if coin.pos.x == coin.target_x and coin.pos.y == coin.target_y then
			pick_target()  -- pick a new target for the next drop
		end

		state.debug_text = "t: " .. coin.target_x .. ", " .. coin.target_y .. "; " ..
			"p: " .. coin.pos.x .. ", " .. coin.pos.y
	end

	coin.update = function(self)
		if coin.state == coin_state.initial_drop then
			update_initial_drop()
		elseif coin.state == coin_state.dropping then
			update_dropping()
		end	
	end

	coin.draw = function(self)
		spr(18, coin.pos.x, coin.pos.y)
	end

	return coin
end

__gfx__
000000000c00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c00000c0000700000770000000700000007070000007000000070000007770000777000000770000000000000000000000000000000000000000000
007007000c00000c0007700000007000000770000007770000070000000700000000070000707000007070000000000000000000000000000000000000000000
000770000c00000c0000700000070000000070000000070000007000000770000000700000777000000770000000000000000000000000000000000000000000
000770000c00000c0000700000777000000700000000070000077000000770000007000000777000000070000000000000000000000000000000000000000000
0070070000ccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000070000aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000070700aaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000007000aaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000aaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000021212100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000001111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000002121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000021212121212121212100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000605040302020304050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
